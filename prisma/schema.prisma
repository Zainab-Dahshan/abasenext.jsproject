// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  engineType = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id // This will store the Supabase UUID
  email     String   @unique
  name      String
  // Remove password field - handled by Supabase
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  // Relations remain the same
  polls Poll[]
  votes Vote[]

  @@map("users")
}

model Poll {
  id          String   @id @default(cuid())
  title       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  createdBy String
  user      User     @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  options   PollOption[]
  votes     Vote[]

  @@map("polls")
}

model PollOption {
  id     String @id @default(cuid())
  text   String
  voteCount Int    @default(0)
  pollId String

  // Relations
  poll  Poll   @relation(fields: [pollId], references: [id], onDelete: Cascade)
  votes Vote[]

  @@map("poll_options")
}

model Vote {
  id       String @id @default(cuid())
  pollId   String
  optionId String
  userId   String
  createdAt DateTime @default(now())

  // Relations
  poll   Poll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  option PollOption @relation(fields: [optionId], references: [id], onDelete: Cascade)
  user   User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([pollId, userId])
  @@map("votes")
}
